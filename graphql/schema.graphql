### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Collaborator {
  address: String
  avatar: String
  collaboratorType: CollaboratorType
  email: String
  id: String
  lastName: String
  name: String
  phone: String
  projects: [Project]
  typeId: String
}

type CollaboratorType {
  id: String
  type: String
}

type Customer {
  address: String
  email: String
  id: String
  lastName: String
  logo: String
  name: String
  notes: String
  phone: String
  status: Status
  userName: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type Document {
  id: String
  link: String
  number: String
  project: Project
  projectId: String
}

type Mutation {
  createClient(address: String!, email: String!, lastName: String!, name: String!, phone: String!): Customer!
  createCollaborator(address: String!, email: String!, lastName: String!, name: String!, phone: String!): Collaborator!
  createNote(date: String!, note: String!, projectId: String!): Note!
  createProject(address: String!, assistant: String, customer: String!, endDate: String, name: String!, note: String, onField: String, responsible: String!, startDate: String!, task: String!, typeId: String!): Project!
  createReminder(assignee: String!, date: String!, description: String!, status: String!, title: String!): Reminder!
  deleteNote(id: String!): Note!
  updateProject(address: String!, assistant: String, customer: String!, endDate: String, id: String!, name: String!, onField: String, responsible: String!, startDate: String!, typeId: String!): Project!
  updateStatus(id: String!, task: String!): Project!
}

type Note {
  date: String
  id: String
  note: String
  project: Project
  projectId: String
}

type Project {
  address: String
  collaborators: [Collaborator]
  customer: Customer
  description: String
  documents: [Document]
  endDate: Date
  id: String
  location: String
  name: String
  notes: [Note]
  projectType: ProjectType
  startDate: Date
  status: ProjectStatus
  task: String
  typeId: String
}

enum ProjectStatus {
  CANCELED
  COMPLETED
  DELAYED
  IN_PROGRESS
}

type ProjectType {
  id: String
  type: String
}

type Query {
  collaborator: [Collaborator]!
  collaboratorType: CollaboratorType!
  currentWeekProjects: [Project]
  customer(id: String): Customer
  customers: [Customer]!
  document(id: String): Document!
  documents: [Document]!
  note: [Note]!
  project(id: String): Project
  projectType(id: String): ProjectType!
  projectTypes: [ProjectType]!
  projects: [Project]!
  reminders: [Reminder]!
  taskType(id: String): TaskType!
  taskTypes: [TaskType]!
  tasks: [Task]!
  users: [User]!
}

type Reminder {
  assignee: Collaborator
  assigneeId: String
  date: String
  description: String
  status: String
  title: String
}

enum Role {
  ADMIN
  USER
}

enum Status {
  ACTIVE
  INACTIVE
}

type Task {
  collaborator: [Collaborator]
  id: String
  project: Project
  status: String
  taskType: TaskType
  typeId: String
}

type TaskType {
  id: String
  name: String
}

type User {
  email: String
  id: String
  image: String
  name: String
  role: Role
}